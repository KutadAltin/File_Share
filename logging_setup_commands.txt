# Phase 1: Complete Windows 10 LTSC Logging Setup
# Run these commands in an elevated PowerShell session

Write-Host "=== Phase 1: Windows 10 LTSC Logging Configuration ===" -ForegroundColor Cyan
Write-Host "Setting up comprehensive attack scenario logging..." -ForegroundColor Green
Write-Host ""

# 1. Download and Install Sysmon
Write-Host "[Step 1] Downloading and Installing Sysmon..." -ForegroundColor Yellow
$sysmonUrl = "https://download.sysinternals.com/files/Sysmon.zip"
$tempPath = "$env:TEMP\Sysmon.zip"
$extractPath = "$env:TEMP\Sysmon"

try {
    # Download Sysmon
    Write-Host "Downloading Sysmon from Microsoft..." -ForegroundColor White
    Invoke-WebRequest -Uri $sysmonUrl -OutFile $tempPath -UseBasicParsing
    
    # Extract Sysmon
    Expand-Archive -Path $tempPath -DestinationPath $extractPath -Force
    
    # Install Sysmon with custom config
    Write-Host "Installing Sysmon with custom configuration..." -ForegroundColor White
    if (Test-Path ".\sysmon-config.xml") {
        & "$extractPath\Sysmon64.exe" -accepteula -i .\sysmon-config.xml
        Write-Host "✓ Sysmon installed successfully" -ForegroundColor Green
    } else {
        Write-Host "⚠ sysmon-config.xml not found. Installing with default config..." -ForegroundColor Red
        & "$extractPath\Sysmon64.exe" -accepteula -i
    }
} catch {
    Write-Host "✗ Error installing Sysmon: $_" -ForegroundColor Red
}

# 2. Configure PowerShell Logging
Write-Host "`n[Step 2] Configuring PowerShell Logging..." -ForegroundColor Yellow

try {
    # Enable PowerShell Script Block Logging
    $psLoggingPath = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\PowerShell\ScriptBlockLogging"
    if (!(Test-Path $psLoggingPath)) {
        New-Item -Path $psLoggingPath -Force | Out-Null
    }
    Set-ItemProperty -Path $psLoggingPath -Name "EnableScriptBlockLogging" -Value 1
    Set-ItemProperty -Path $psLoggingPath -Name "EnableScriptBlockInvocationLogging" -Value 1
    
    # Enable PowerShell Transcription
    $psTranscriptionPath = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\PowerShell\Transcription"
    if (!(Test-Path $psTranscriptionPath)) {
        New-Item -Path $psTranscriptionPath -Force | Out-Null
    }
    Set-ItemProperty -Path $psTranscriptionPath -Name "EnableTranscripting" -Value 1
    Set-ItemProperty -Path $psTranscriptionPath -Name "EnableInvocationHeader" -Value 1
    Set-ItemProperty -Path $psTranscriptionPath -Name "OutputDirectory" -Value "C:\PSTranscripts"
    
    # Create transcription directory
    New-Item -Path "C:\PSTranscripts" -ItemType Directory -Force | Out-Null
    Write-Host "✓ PowerShell logging configured" -ForegroundColor Green
} catch {
    Write-Host "✗ Error configuring PowerShell logging: $_" -ForegroundColor Red
}

# 3. Configure Windows Event Log Settings
Write-Host "`n[Step 3] Configuring Windows Event Logs..." -ForegroundColor Yellow

$eventLogs = @(
    @{Name="Microsoft-Windows-Sysmon/Operational"; MaxSize=1024MB; Description="Sysmon Events"},
    @{Name="Security"; MaxSize=512MB; Description="Security Events"},
    @{Name="System"; MaxSize=256MB; Description="System Events"},
    @{Name="Application"; MaxSize=256MB; Description="Application Events"},
    @{Name="Microsoft-Windows-PowerShell/Operational"; MaxSize=512MB; Description="PowerShell Operational"},
    @{Name="Windows PowerShell"; MaxSize=256MB; Description="PowerShell Classic"}
)

foreach ($log in $eventLogs) {
    try {
        Write-Host "Configuring $($log.Description)..." -ForegroundColor White
        wevtutil sl $log.Name /ms:$($log.MaxSize) 2>$null
        Write-Host "✓ $($log.Name) configured" -ForegroundColor Green
    } catch {
        Write-Host "⚠ Could not configure $($log.Name)" -ForegroundColor Yellow
    }
}

# 4. Enable Process Creation Auditing
Write-Host "`n[Step 4] Enabling Advanced Process Auditing..." -ForegroundColor Yellow

try {
    # Enable detailed process auditing
    auditpol /set /subcategory:"Process Creation" /success:enable /failure:enable
    auditpol /set /subcategory:"Process Termination" /success:enable /failure:enable
    
    # Enable command line logging
    $auditPath = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System\Audit"
    if (!(Test-Path $auditPath)) {
        New-Item -Path $auditPath -Force | Out-Null
    }
    Set-ItemProperty -Path $auditPath -Name "ProcessCreationIncludeCmdLine_Enabled" -Value 1
    Write-Host "✓ Advanced process auditing enabled" -ForegroundColor Green
} catch {
    Write-Host "✗ Error enabling process auditing: $_" -ForegroundColor Red
}

# 5. Configure Additional Security Logging
Write-Host "`n[Step 5] Enabling Additional Security Logging..." -ForegroundColor Yellow

try {
    # Enable logon/logoff auditing
    auditpol /set /subcategory:"Logon" /success:enable /failure:enable
    auditpol /set /subcategory:"Logoff" /success:enable /failure:enable
    auditpol /set /subcategory:"Special Logon" /success:enable /failure:enable
    
    # Enable privilege use auditing
    auditpol /set /subcategory:"Sensitive Privilege Use" /success:enable /failure:enable
    auditpol /set /subcategory:"Non Sensitive Privilege Use" /success:enable /failure:enable
    
    # Enable object access auditing
    auditpol /set /subcategory:"File System" /success:enable /failure:enable
    auditpol /set /subcategory:"Registry" /success:enable /failure:enable
    
    Write-Host "✓ Additional security logging enabled" -ForegroundColor Green
} catch {
    Write-Host "✗ Error enabling security logging: $_" -ForegroundColor Red
}

# 6. Create Target Files for Attack Scenario
Write-Host "`n[Step 6] Setting up Attack Scenario Environment..." -ForegroundColor Yellow

try {
    # Create target file on desktop (if not exists)
    $desktopPath = [Environment]::GetFolderPath("Desktop")
    $targetFile = "$desktopPath\important_info.txt"
    
    if (!(Test-Path $targetFile)) {
        $dummyContent = @"
CONFIDENTIAL INFORMATION
========================
Project: Security Assessment Lab
Date: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")
Classification: Internal Use Only

This is a dummy file created for cybersecurity lab testing.
It contains no actual sensitive information.

Database Credentials (DUMMY):
- Server: lab-db-01.internal
- Username: lab_admin
- Password: DummyPassword123!

Network Information (DUMMY):
- Internal Network: 192.168.100.0/24
- VPN Gateway: vpn.company.internal
- Admin VLAN: 10.10.10.0/24

This file is used for testing data exfiltration scenarios in controlled lab environments.
"@
        $dummyContent | Out-File -FilePath $targetFile -Encoding UTF8
        Write-Host "✓ Target file created: $targetFile" -ForegroundColor Green
    }
    
    # Set up guest account (if needed)
    try {
        net user guest /active:yes 2>$null
        Write-Host "✓ Guest account activated" -ForegroundColor Green
    } catch {
        Write-Host "⚠ Could not activate guest account (may require manual setup)" -ForegroundColor Yellow
    }
    
} catch {
    Write-Host "✗ Error setting up environment: $_" -ForegroundColor Red
}

# 7. Create Log Collection Script
Write-Host "`n[Step 7] Creating Log Collection Script..." -ForegroundColor Yellow

$logCollectionScript = @'
# Attack Scenario Log Collection Script
param(
    [string]$OutputPath = "C:\AttackLogs",
    [string]$ZipName = "attack_logs_$(Get-Date -Format 'yyyyMMdd_HHmmss').zip"
)

Write-Host "=== Collecting Attack Scenario Logs ===" -ForegroundColor Cyan
$startTime = Get-Date

# Create output directory
New-Item -Path $OutputPath -ItemType Directory -Force | Out-Null
Write-Host "Output directory: $OutputPath" -ForegroundColor Yellow

# Export event logs
Write-Host "`nExporting event logs..." -ForegroundColor Green
try {
    wevtutil epl "Microsoft-Windows-Sysmon/Operational" "$OutputPath\sysmon.evtx"
    Write-Host "✓ Sysmon logs exported" -ForegroundColor White
} catch { Write-Host "✗ Sysmon export failed" -ForegroundColor Red }

try {
    wevtutil epl "Security" "$OutputPath\security.evtx"
    Write-Host "✓ Security logs exported" -ForegroundColor White
} catch { Write-Host "✗ Security export failed" -ForegroundColor Red }

try {
    wevtutil epl "Microsoft-Windows-PowerShell/Operational" "$OutputPath\powershell_operational.evtx"
    Write-Host "✓ PowerShell Operational logs exported" -ForegroundColor White
} catch { Write-Host "✗ PowerShell Operational export failed" -ForegroundColor Red }

try {
    wevtutil epl "Windows PowerShell" "$OutputPath\powershell_classic.evtx"
    Write-Host "✓ PowerShell Classic logs exported" -ForegroundColor White
} catch { Write-Host "✗ PowerShell Classic export failed" -ForegroundColor Red }

# Copy PowerShell transcripts
if (Test-Path "C:\PSTranscripts") {
    try {
        Copy-Item -Path "C:\PSTranscripts\*" -Destination $OutputPath -Recurse -Force
        Write-Host "✓ PowerShell transcripts copied" -ForegroundColor White
    } catch { Write-Host "✗ Transcript copy failed" -ForegroundColor Red }
}

# Generate system information
Write-Host "`nGenerating system information..." -ForegroundColor Green
$sysInfo = @"
Attack Scenario Log Collection Report
====================================
Collection Time: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")
System: $env:COMPUTERNAME
User: $env:USERNAME
Domain: $env:USERDOMAIN

Log Files Collected:
- sysmon.evtx (Sysmon operational events)
- security.evtx (Windows security events)  
- powershell_operational.evtx (PowerShell operational logs)
- powershell_classic.evtx (PowerShell classic logs)
- PowerShell transcripts (if any)

Analysis Priority Events:
1. Event ID 1 (Process Creation) - Track attack execution
2. Event ID 3 (Network Connection) - Identify reverse shells
3. Event ID 11 (File Create) - Monitor payload drops and exfiltration
4. Event ID 4104 (PowerShell Script Block) - PowerShell activity
5. Event ID 4688 (Process Creation) - Windows process auditing

Next Steps:
1. Import .evtx files into analysis tools
2. Filter by attack execution timeframe
3. Correlate events across different log sources
4. Focus on suspicious process trees and network connections

Attack Chain Indicators to Look For:
- Reverse shell connections on port 4444
- Privilege escalation commands (whoami, net user, etc.)
- Credential harvesting tools (mimikatz, hashdump)
- File system access to sensitive areas
- Unusual PowerShell activity

Collection completed in: $((Get-Date) - $startTime)
"@

$sysInfo | Out-File -FilePath "$OutputPath\analysis_guide.txt" -Encoding UTF8

# Create ZIP archive
Write-Host "`nCreating archive..." -ForegroundColor Green
try {
    $zipPath = "C:\$ZipName"
    Compress-Archive -Path "$OutputPath\*" -DestinationPath $zipPath -Force
    
    $zipSize = [math]::Round((Get-Item $zipPath).Length / 1MB, 2)
    Write-Host "✓ Archive created: $zipPath ($zipSize MB)" -ForegroundColor Green
    
    # Display summary
    Write-Host "`n=== Collection Complete ===" -ForegroundColor Cyan
    Write-Host "Archive Location: $zipPath" -ForegroundColor Yellow
    Write-Host "Archive Size: $zipSize MB" -ForegroundColor Yellow
    Write-Host "Total Time: $((Get-Date) - $startTime)" -ForegroundColor Yellow
    
} catch {
    Write-Host "✗ Archive creation failed: $_" -ForegroundColor Red
    Write-Host "Logs available in: $OutputPath" -ForegroundColor Yellow
}
'@

try {
    $logCollectionScript | Out-File -FilePath "C:\collect_logs.ps1" -Encoding UTF8
    Write-Host "✓ Log collection script created: C:\collect_logs.ps1" -ForegroundColor Green
} catch {
    Write-Host "✗ Error creating collection script: $_" -ForegroundColor Red
}

# 8. Display Setup Summary
Write-Host "`n" -NoNewline
Write-Host "========================================" -ForegroundColor Cyan
Write-Host "  PHASE 1 SETUP COMPLETE" -ForegroundColor Cyan
Write-Host "========================================" -ForegroundColor Cyan
Write-Host ""

Write-Host "Configuration Status:" -ForegroundColor White
Write-Host "✓ Sysmon installed with custom attack-focused config" -ForegroundColor Green
Write-Host "✓ PowerShell logging enabled (script blocks + transcription)" -ForegroundColor Green
Write-Host "✓ Windows Event Logs configured with increased retention" -ForegroundColor Green
Write-Host "✓ Advanced process auditing enabled" -ForegroundColor Green
Write-Host "✓ Security event logging configured" -ForegroundColor Green
Write-Host "✓ Target environment prepared for attack simulation" -ForegroundColor Green
Write-Host "✓ Automated log collection script ready" -ForegroundColor Green

Write-Host "`nPost-Attack Log Collection:" -ForegroundColor White
Write-Host "Run: PowerShell -ExecutionPolicy Bypass -File C:\collect_logs.ps1" -ForegroundColor Yellow

Write-Host "`nNext Phase:" -ForegroundColor White
Write-Host "Phase 2: Create Metasploit payload on Kali VM" -ForegroundColor Yellow

Write-Host "`nSystem ready for cybersecurity lab attack simulation!" -ForegroundColor Green
Write-Host "========================================" -ForegroundColor Cyan